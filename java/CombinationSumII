class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
     
        List<List<Integer>> list = new LinkedList<List<Integer>>();
        // build a new linked list 
        Arrays.sort(candidates);
        // sort the candidates 
        backtrack(list, new ArrayList<Integer>(), candidates, target, 0);
        // backtracking function 
        return list;
}

private void backtrack(List<List<Integer>> list, List<Integer> tempList, int[] cand, int remain, int start) {
   
   if(remain < 0) return; /** no solution */
   else if(remain == 0) list.add(new ArrayList<>(tempList));
    // if the target is 0 it should add a new arrayList 
   else{
      for (int i = start; i < cand.length; i++) { // loop 
         if(i > start && cand[i] == cand[i-1]) continue; /** skip duplicates */
         tempList.add(cand[i]);
          // 
         backtrack(list, tempList, cand, remain - cand[i], i+1);
         tempList.remove(tempList.size() - 1);
      }
   }
}
}

// Two functions --> one to backtrack one to call the function 
//
