/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        // using this a helper function 
        
        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
        
        // represents vlaue from 2^63 on both negative and postiive ends 
    }
    
    public boolean isValidBST(TreeNode root, long max, long min) { 
        
        
        if (root == null) {
            return true;
        }
        
        if (root.val <= max || root.val >= min ) { 
              
            return false;  // false becuause it its opposite of what meets the criteria 
            
        }
        
        else {
            return isValidBST(root.right, root.val, max) && isValidBST(root.left, min, root.val);
        }
    }
}
        
            
            // figure out clauses based on the portion sizes 
            
                // need to check if the root value fits the valid criteria 
            
            
            // if the root valueb fits the criteria adjust it based on the values and left and right side of the tree 
         
        
        // Use of Long_values
        // 3 line solution 
        
        // base case: check if root is null if root is null return true
        // in most cases you need a base case 
        // you also need a helper function in most cases 
        
public class Solution {
    public boolean isValidBST(TreeNode root) {
        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    
    public boolean isValidBST(TreeNode root, long minVal, long maxVal) {
        if (root == null) return true;
        if (root.val >= maxVal || root.val <= minVal) return false;
        return isValidBST(root.left, minVal, root.val) && isValidBST(root.right, root.val, maxVal);
    }
}


// correct solution there's alwyas a number of differetn techniques to solve this question  
