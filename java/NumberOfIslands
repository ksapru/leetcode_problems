class Solution {
    public int numIslands(char[][] grid) {
        
        // number of islands is a question that's hard to understand  
        if ( grid == null || grid.length == 0) {
            return 0;  // base case if grid is length is null or the length is 0 exclude it 
        }
        
        int count = 0;  // a counter 
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) { // double loop for traversal 
                // up until this its general 
                // 1 is the interesting case
                if (grid[i][j] == '1') { // if the case has 1 
                    count += dfs(grid, i, j); // increase the count using the backtracking function 
                    // this is the backtracking function
                }
            }
        }
        
        return count; 
    }
    
    public int dfs(char[][] grid, int i, int j) {
        // check for the bounds 
        
        if ( i < 0 || i >= grid.length || j < 0 || j >= grid[i].length || grid[i][j] == '0') {
            // test case again less than 0 or the pointer is greater than the grid length or simply 0 
            return 0;
        }
        
        grid[i][j] = '0'; // the four recursive calls 
        dfs(grid, i + 1, j);
        dfs(grid, i - 1, j);
        dfs(grid, i, j + 1);
        dfs(grid, i, j - 1);
        return 1; // return 1 if so         
    }  
}




// function

// base case check for 0 
// double for loop going over everything 
// add to it the recursive function
// write the recrusive function
// check for exceptions such as less than 1 or length or if both squares are 0 
// call recursive functions 
